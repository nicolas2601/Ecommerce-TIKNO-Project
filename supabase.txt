# Flujo de Trabajo Completo - Ecommerce React + Django

## üìã Estructura del Proyecto

```
ecommerce-project/
‚îú‚îÄ‚îÄ frontend/           # React + Tailwind + Framer Motion + PNPM
‚îú‚îÄ‚îÄ backend/            # Django + DRF + Supabase
‚îú‚îÄ‚îÄ requirements.txt    # Dependencias Python
‚îî‚îÄ‚îÄ README.md
```

## üõ†Ô∏è FASE 1: Configuraci√≥n Inicial del Backend Django

### 1.1 Crear proyecto Django
- Crear carpeta `backend`
- Instalar Python virtual environment
- Instalar Django y Django REST Framework
- Crear proyecto Django: `django-admin startproject ecommerce_backend`
- Instalar dependencias: `djangorestframework`, `django-cors-headers`, `psycopg2-binary`, `python-decouple`, `djangorestframework-simplejwt`, `Pillow`

### 1.2 Configurar conexi√≥n a Supabase
- Configurar PostgreSQL en `settings.py` con credenciales de Supabase
- Instalar dependencias adicionales: `supabase`, `python-decouple`
- Crear archivo `.env` con DATABASE_URL, SECRET_KEY, DEBUG, SUPABASE_URL, SUPABASE_KEY
- Configurar cliente de Supabase para Storage
- Configurar CORS para permitir requests del frontend React
- Crear bucket p√∫blico "productos" en Supabase Storage (si no existe)

### 1.3 Configurar Django REST Framework
- Agregar DRF a INSTALLED_APPS
- Configurar autenticaci√≥n JWT con `rest_framework_simplejwt`
- Configurar permisos por defecto
- Configurar pagination global
- Configurar formato de respuesta JSON

### 1.4 Crear aplicaciones Django
- Crear app `accounts` para usuarios y autenticaci√≥n
- Crear app `products` para productos y categor√≠as
- Crear app `orders` para carrito y √≥rdenes
- Crear app `core` para configuraciones generales

## üîê FASE 2: Sistema de Autenticaci√≥n

### 2.1 Modelo de Usuario personalizado
- Crear modelo User personalizado en `accounts/models.py`
- Campos: email, first_name, last_name, phone, is_active, is_staff, date_joined
- Usar email como USERNAME_FIELD en lugar de username
- Crear UserManager personalizado

### 2.2 Serializers de autenticaci√≥n
- Crear UserSerializer para datos de usuario
- Crear RegisterSerializer con validaci√≥n de contrase√±as
- Crear LoginSerializer para credenciales
- Crear UserProfileSerializer para perfil completo

### 2.3 Views de autenticaci√≥n
- Crear RegisterView para registro de usuarios
- Crear LoginView que retorna tokens JWT
- Crear UserProfileView para obtener/actualizar perfil
- Crear LogoutView para invalidar tokens (opcional)
- Crear PasswordResetView para recuperar contrase√±a

### 2.4 URLs de autenticaci√≥n
- Configurar rutas en `accounts/urls.py`
- Endpoints: `/api/auth/register/`, `/api/auth/login/`, `/api/auth/profile/`
- Incluir rutas de JWT refresh token

## üì¶ FASE 3: Modelos de Ecommerce

### 3.1 Modelos de productos
- Crear modelo Category con campos: name, slug, description, image_url (URL de Supabase Storage), is_active
- Crear modelo Product con campos: name, slug, description, price, stock, category, main_image_url, created_at, updated_at
- Crear modelo ProductImage para m√∫ltiples im√°genes: product, image_url, alt_text, is_main, order
- Todas las URLs de im√°genes apuntan al bucket "productos" en Supabase Storage
- Implementar m√©todos `__str__` y `get_absolute_url`
- Agregar m√©todo `get_full_image_url()` para construir URLs completas

### 3.2 Modelos de carrito y √≥rdenes
- Crear modelo Cart vinculado a User
- Crear modelo CartItem con product, quantity, price
- Crear modelo Order con user, total, status, shipping_address, created_at
- Crear modelo OrderItem similar a CartItem pero para √≥rdenes
- Definir choices para status de orden (pending, processing, shipped, delivered, cancelled)

### 3.3 Migraciones
- Ejecutar `python manage.py makemigrations` para cada app
- Ejecutar `python manage.py migrate` para crear tablas en Supabase
- Crear datos iniciales con fixtures o comandos personalizados

## üì∏ FASE 4: Gesti√≥n de Im√°genes con Supabase Storage

### 4.1 Configurar Supabase Storage en Django
- Crear servicio `SupabaseStorageService` en `core/services.py`
- Implementar m√©todos: `upload_image()`, `delete_image()`, `get_public_url()`
- Configurar nombres √∫nicos para archivos (UUID + timestamp)
- Configurar validaci√≥n de tipos de archivo (jpg, png, webp)
- Configurar l√≠mites de tama√±o de archivo

### 4.2 Upload de im√°genes en API
- Crear endpoint `/api/products/upload-image/` para subir im√°genes
- Validar archivos antes de subir a Supabase
- Retornar URL p√∫blica de la imagen subida
- Implementar manejo de errores de upload
- Crear endpoint para eliminar im√°genes hu√©rfanas

### 4.3 Gesti√≥n de im√°genes en admin
- Crear view para upload m√∫ltiple de im√°genes
- Implementar preview de im√°genes antes de guardar
- Crear funcionalidad para reordenar im√°genes
- Implementar eliminaci√≥n de im√°genes con confirmaci√≥n
- Crear thumbnail autom√°tico para admin

### 4.4 Optimizaci√≥n de im√°genes
- Implementar compresi√≥n autom√°tica antes de subir
- Crear diferentes tama√±os: thumbnail, medium, large
- Configurar lazy loading para im√°genes grandes
- Implementar cache de URLs de im√°genes

### 5.1 Serializers para productos
- Crear CategorySerializer con image_url completa
- Crear ProductSerializer con main_image_url y lista de im√°genes
- Crear ProductImageSerializer para gesti√≥n individual de im√°genes
- Crear ProductDetailSerializer con todas las im√°genes ordenadas
- Crear ProductCreateSerializer para admin con upload de im√°genes

### 5.2 ViewSets y Views
- Crear CategoryViewSet con operaciones CRUD e im√°genes
- Crear ProductViewSet con filtros, b√∫squeda, paginaci√≥n e im√°genes
- Crear ProductImageViewSet para gesti√≥n de im√°genes individuales
- Implementar filtros por categor√≠a, precio, disponibilidad
- Crear custom actions para productos destacados, ofertas
- Agregar endpoint para upload masivo de im√°genes

### 5.3 Carrito API
- Crear CartSerializer y CartItemSerializer con im√°genes de productos
- Crear CartViewSet para gestionar carrito del usuario
- Endpoints para agregar/quitar productos del carrito
- Endpoint para obtener carrito actual con im√°genes y calcular totales

### 5.4 √ìrdenes API
- Crear OrderSerializer y OrderItemSerializer con im√°genes
- Crear OrderViewSet para gestionar √≥rdenes
- Endpoint para crear orden desde carrito
- Endpoints para historial de √≥rdenes del usuario con im√°genes

## üîß FASE 5: API REST con Django REST Framework

### 5.1 Permisos personalizados
- Crear IsOwnerOrReadOnly para que usuarios solo editen sus datos
- Crear IsAdminOrReadOnly para operaciones de admin
- Configurar permisos por ViewSet

### 6.2 Validaciones
- Validar stock disponible al agregar al carrito
- Validar datos de productos (precios positivos, stock no negativo)
- Validar formato de email y contrase√±as seguras
- Validar √∫nicos slugs para productos y categor√≠as
- Validar tipos y tama√±os de archivos de imagen
- Validar URLs de im√°genes antes de guardar en BD

### 5.3 Manejo de errores
- Crear custom exception handler
- Responses consistentes para errores 400, 401, 403, 404, 500
- Logging de errores cr√≠ticos

## üõ°Ô∏è FASE 6: Permisos y Validaciones

## üé® FASE 7: Configuraci√≥n del Frontend React

### 7.1 Crear proyecto React
- Crear carpeta `frontend`
- Instalar React con TypeScript: `npx create-react-app frontend --template typescript`
- Instalar dependencias: `tailwindcss`, `framer-motion`, `axios`, `react-router-dom`, `@types/react-router-dom`
- Instalar dependencias adicionales: `react-dropzone`, `react-image-crop`, `react-lazy-load-image-component`

### 7.2 Configurar Tailwind CSS
- Instalar y configurar Tailwind CSS
- Configurar archivo `tailwind.config.js` con tema personalizado
- Configurar colores, fuentes y breakpoints del ecommerce
- Crear clases utilitarias personalizadas
- Agregar configuraciones espec√≠ficas para galer√≠a de im√°genes

### 7.3 Configurar Framer Motion
- Instalar framer-motion
- Crear componentes base con animaciones: FadeIn, SlideIn, ScaleIn, ImageReveal
- Configurar variants globales para animaciones consistentes
- Crear AnimatedLayout para transiciones entre p√°ginas
- Crear animaciones espec√≠ficas para galer√≠a de im√°genes

### 7.4 Configurar routing
- Configurar React Router con rutas principales
- Crear ProtectedRoute component para rutas que requieren autenticaci√≥n
- Configurar rutas: `/`, `/products`, `/product/:id`, `/cart`, `/checkout`, `/profile`, `/orders`
- Agregar rutas para admin con gesti√≥n de im√°genes

## üîå FASE 8: Estado Global y HTTP Client

### 8.1 Context API para estado global
- Crear AuthContext para manejo de autenticaci√≥n
- Crear CartContext para estado del carrito
- Crear ProductContext para productos y filtros
- Crear ImageContext para gesti√≥n de im√°genes y uploads
- Implementar useContext hooks personalizados

### 8.2 Configurar Axios
- Crear instancia de Axios con baseURL del backend
- Configurar interceptors para agregar JWT tokens autom√°ticamente
- Configurar interceptor de respuesta para manejar errores 401
- Crear funciones helper para diferentes tipos de requests
- Crear funciones espec√≠ficas para upload de im√°genes

### 8.3 Custom hooks
- Crear useAuth hook para login, logout, register
- Crear useProducts hook para obtener productos, filtrar, buscar
- Crear useCart hook para gestionar carrito
- Crear useOrders hook para √≥rdenes del usuario
- Crear useImageUpload hook para subir im√°genes a Supabase
- Crear useImageGallery hook para gesti√≥n de galer√≠as

## üñºÔ∏è FASE 9: Componentes del Frontend

### 9.1 Componentes base con animaciones
- Layout principal con header, navbar, footer animados
- Button component con hover y click animations
- Input component con focus animations
- Modal component con backdrop y slide animations
- Card component para productos con hover effects
- ImageUpload component con drag & drop y preview
- ImageGallery component con lightbox y navegaci√≥n

### 9.2 Componentes de gesti√≥n de im√°genes
- ImageDropzone para subir im√°genes con drag & drop
- ImagePreview con crop y resize b√°sico
- ImageCarousel para m√∫ltiples im√°genes con navegaci√≥n
- ImageLightbox para vista ampliada con zoom
- ImageUploadProgress con barra de progreso animada
- ImageManager para admin con reordenamiento

### 9.3 Componentes de autenticaci√≥n
- LoginForm con validaci√≥n y animaciones de error
- RegisterForm con pasos animados
- UserProfile con edici√≥n inline
- ProtectedRoute con loading states animados

### 9.4 Componentes de productos
- ProductCard con imagen principal, precio, animaciones hover
- ProductList con grid responsivo y filtros animados
- ProductDetail con galer√≠a de im√°genes interactiva y animaciones
- ProductImageGallery con thumbnails y vista principal
- SearchBar con sugerencias animadas
- CategoryFilter con checkboxes animados

### 9.5 Componentes de carrito
- CartIcon con badge animado del contador
- CartItem con imagen del producto y animaciones de agregar/quitar
- CartSidebar que desliza desde la derecha
- CheckoutForm con pasos animados
- OrderSummary con im√°genes y totales animados

## üéØ FASE 10: P√°ginas Principales

### 10.1 P√°gina de inicio
- Hero section con animaciones llamativas e imagen de fondo
- Productos destacados con carousel animado e im√°genes
- Categor√≠as con hover effects e im√°genes representativas
- Testimonios con fade in animations y avatares

### 10.2 Cat√°logo de productos
- Grid de productos con lazy loading de im√°genes
- Filtros laterales con animaciones
- Paginaci√≥n con transiciones suaves
- B√∫squeda con resultados animados y preview de im√°genes

### 10.3 P√°gina de producto
- Galer√≠a de im√°genes principal con zoom y thumbnails
- Navegaci√≥n entre im√°genes con animaciones fluidas
- Informaci√≥n del producto con reveal animations
- Bot√≥n agregar al carrito con feedback animado
- Productos relacionados con carousel e im√°genes

### 10.4 Carrito y checkout
- Resumen del carrito con im√°genes de productos y animaciones
- Formulario de checkout con validaci√≥n animada
- Pasos del proceso con progress bar animado
- P√°gina de confirmaci√≥n con celebraci√≥n e im√°genes de productos

## üöÄ FASE 11: Funcionalidades Avanzadas

### 11.1 Panel de administraci√≥n
- Dashboard con estad√≠sticas y gr√°ficos
- CRUD de productos con drag & drop para m√∫ltiples im√°genes
- Gestor de im√°genes con preview, crop y resize
- Upload masivo de im√°genes con progress bar
- Gesti√≥n de √≥rdenes con cambios de estado
- Gesti√≥n de usuarios con roles
- Galer√≠a de im√°genes organizadas por categor√≠as

### 11.2 Mejoras de UX con im√°genes
- Loading skeletons animados para im√°genes
- Progressive image loading (blur to sharp)
- Image lazy loading con intersection observer
- Notificaciones toast con framer-motion
- Confirmaciones con modales animados
- Breadcrumbs con transiciones
- Image error fallbacks con placeholders

### 11.3 Optimizaciones de im√°genes
- Lazy loading de im√°genes con intersection observer
- WebP conversion autom√°tica
- Responsive images con diferentes tama√±os
- Image preloading para navegaci√≥n m√°s fluida
- Virtual scrolling para galer√≠as grandes
- Memoizaci√≥n de componentes de im√°genes pesados
- Cache de im√°genes en cliente

## üîß FASE 12: Configuraciones de Producci√≥n

### 11.1 Backend Django
- Configurar ALLOWED_HOSTS para producci√≥n
- Configurar static files y media files
- Configurar CORS_ALLOWED_ORIGINS
- Configurar logging para producci√≥n
- Configurar cache con Redis (opcional)

### 11.2 Frontend React
- Configurar build de producci√≥n
- Configurar variables de entorno
- Optimizar bundle size con code splitting
- Configurar PWA (opcional)

### 11.3 Seguridad
- Configurar HTTPS en producci√≥n
- Validar y sanitizar todas las entradas
- Implementar rate limiting en Django
- Configurar CSP headers

## üìù FASE 13: Testing y Documentaci√≥n

### 12.1 Testing backend
- Tests unitarios para models y serializers
- Tests de integraci√≥n para APIs
- Tests de autenticaci√≥n y permisos
- Coverage report

### 12.2 Testing frontend
- Tests unitarios para componentes
- Tests de integraci√≥n para flujos principales
- Tests E2E con Cypress (opcional)
- Tests de accesibilidad

### 12.3 Documentaci√≥n
- Documentaci√≥n de API con DRF browsable API
- README completo con instrucciones
- Documentaci√≥n de componentes React
- Gu√≠a de despliegue

## üîß Configuraciones Espec√≠ficas

### Backend - settings.py
```python
# Configuraci√≥n de Supabase
SUPABASE_URL = config('SUPABASE_URL')
SUPABASE_KEY = config('SUPABASE_KEY')
SUPABASE_BUCKET = 'productos'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': '5432',
    }
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://yourdomain.com",
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# Configuraci√≥n de archivos
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/webp']
```

### SupabaseStorageService
```python
from supabase import create_client, Client
import uuid
from django.conf import settings

class SupabaseStorageService:
    def __init__(self):
        self.client: Client = create_client(
            settings.SUPABASE_URL, 
            settings.SUPABASE_KEY
        )
        self.bucket = settings.SUPABASE_BUCKET
    
    def upload_image(self, file, folder='products'):
        file_name = f"{folder}/{uuid.uuid4()}-{file.name}"
        response = self.client.storage.from_(self.bucket).upload(
            file_name, file.read()
        )
        return self.get_public_url(file_name)
    
    def get_public_url(self, file_path):
        return self.client.storage.from_(self.bucket).get_public_url(file_path)
    
    def delete_image(self, file_path):
        return self.client.storage.from_(self.bucket).remove([file_path])
```

### Frontend - ImageUpload Component
```typescript
// Hook para subir im√°genes
const useImageUpload = () => {
  const uploadImage = async (file: File, folder: string = 'products') => {
    const formData = new FormData()
    formData.append('image', file)
    formData.append('folder', folder)
    
    const response = await axiosInstance.post('/products/upload-image/', formData, {
      headers: { 'Content-Type': 'multipart/form-data' }
    })
    
    return response.data.url
  }
  
  return { uploadImage }
}

// Componente de upload con drag & drop
const ImageDropzone = ({ onImageUpload, multiple = false }) => {
  const { uploadImage } = useImageUpload()
  
  const handleDrop = async (files: File[]) => {
    const urls = await Promise.all(
      files.map(file => uploadImage(file))
    )
    onImageUpload(multiple ? urls : urls[0])
  }
  
  return (
    <div className="border-dashed border-2 p-8 text-center">
      {/* Implementar drag & drop con react-dropzone */}
    </div>
  )
}
```

## üéØ Orden de Implementaci√≥n Recomendado

1. **Semana 1**: Backend Django + Modelos + Supabase Storage + API b√°sica de im√°genes
2. **Semana 2**: Frontend React + Componentes de im√°genes + Upload b√°sico
3. **Semana 3**: API completa de productos + Galer√≠a frontend + Gesti√≥n de im√°genes
4. **Semana 4**: Carrito + √ìrdenes + Checkout + Optimizaciones de im√°genes
5. **Semana 5**: Panel admin + Gesti√≥n avanzada de im√°genes + Testing
6. **Semana 6**: Documentaci√≥n + Despliegue + Optimizaciones finales

## üöÄ Ventajas de esta Stack con Supabase Storage

**Supabase Storage:**
- Almacenamiento escalable y r√°pido
- URLs p√∫blicas autom√°ticas
- Integraci√≥n nativa con PostgreSQL
- Pol√≠ticas de acceso granulares
- CDN global integrado

**Gesti√≥n de Im√°genes:**
- Upload directo desde React
- M√∫ltiples formatos soportados
- Compresi√≥n autom√°tica
- Lazy loading optimizado
- Galer√≠a interactiva con animaciones

**Performance:**
- Carga r√°pida de im√°genes
- Cache autom√°tico
- Responsive images
- Progressive loading
- Optimizaci√≥n autom√°tica

**Caracter√≠sticas espec√≠ficas del bucket "productos":**
- Bucket p√∫blico para acceso directo
- Organizaci√≥n por carpetas (categories, products, thumbnails)
- Pol√≠ticas de upload solo para usuarios autenticados
- Eliminaci√≥n autom√°tica de im√°genes hu√©rfanas
- Backup autom√°tico incluido en Supabasetes finales

## üöÄ Ventajas de esta Stack

**Backend Django:**
- ORM potente y flexible
- Admin panel autom√°tico
- Seguridad robusta por defecto
- Escalabilidad probada

**Frontend React:**
- Ecosystem maduro
- Performance excelente
- Tailwind para dise√±o r√°pido
- Framer Motion para animaciones fluidas

**Integraci√≥n:**
- API REST bien definida
- Autenticaci√≥n JWT segura
- Separaci√≥n clara de responsabilidades
- Preparado para microservicios

Este flujo te permitir√° crear un ecommerce moderno, con animaciones fluidas y una experiencia de usuario excepcional, manteniendo un backend robusto y escalable.